# Implement PCA from scratch using our custom class

# TO DO: Compute covariance matrix, eigenvalues, and eigenvectors

# Initialize and fit our PCA
pca_custom = PCA(n_components=None)  # Get all components initially
X_pca_custom = pca_custom.fit_transform(X_scaled)

print("Custom PCA Results:")
print(f"Original data shape: {X_scaled.shape}")
print(f"Transformed data shape: {X_pca_custom.shape}")
print(f"Explained variance ratio: {pca_custom.explained_variance_ratio_}")
print(f"Number of components: {pca_custom.n_components_}")
# Calculate explained variance and cumulative variance
# TO DO: Calculate variance percentages and sort eigenvalues

explained_variance = pca_custom.explained_variance_ratio_
cumulative_variance = pca_custom.get_cumulative_variance()

print("Explained Variance by Component:")
for i, (var, cum_var) in enumerate(zip(explained_variance, cumulative_variance)):
    print(f"PC{i+1}: {var:.4f} ({var*100:.2f}%) - Cumulative: {cum_var*100:.2f}%")

# Plot explained variance
plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
plt.bar(range(1, len(explained_variance) + 1), explained_variance * 100, alpha=0.7)
plt.xlabel('Principal Component')
plt.ylabel('Explained Variance (%)')
plt.title('Variance Explained by Each Principal Component')
plt.xticks(range(1, len(explained_variance) + 1))

plt.subplot(1, 2, 2)
plt.plot(range(1, len(cumulative_variance) + 1), cumulative_variance * 100, 'b-', marker='o')
plt.xlabel('Number of Principal Components')
plt.ylabel('Cumulative Explained Variance (%)')
plt.title('Cumulative Explained Variance')
plt.grid(True, alpha=0.3)

plt.tight_layout()
# Dynamic component selection based on explained variance
# TO DO: Select number of components dynamically

# Select components to explain 95% of variance
pca_95 = PCA(n_components=0.95)
X_pca_95 = pca_95.fit_transform(X_scaled)

print(f"Number of components for 95% variance: {pca_95.n_components_}")
print(f"Actual variance explained: {pca_95.get_cumulative_variance()[-1]*100:.2f}%")

# Select components to explain 80% of variance
pca_80 = PCA(n_components=0.80)
X_pca_80 = pca_80.fit_transform(X_scaled)

print(f"Number of components for 80% variance: {pca_80.n_components_}")
print(f"Actual variance explained: {pca_80.get_cumulative_variance()[-1]*100:.2f}%")
plt.show()
