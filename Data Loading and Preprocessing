# Load African Development Indicators Dataset
# Using World Bank data for African countries with multiple economic indicators

def load_african_data():
    """Load African development indicators dataset"""
    try:
        # Try to load from local file first
        df = pd.read_csv('data/african_development_indicators.csv')
    except:
        # Create synthetic African development data with 15+ features
        np.random.seed(42)
        n_countries = 50
        n_features = 15
        
        # Feature names representing various development indicators
        features = [
            'GDP_per_capita', 'Life_Expectancy', 'Literacy_Rate', 'Urban_Population',
            'Access_to_Electricity', 'Mobile_Subscriptions', 'Internet_Users',
            'Health_Expenditure', 'Education_Expenditure', 'Unemployment_Rate',
            'Inflation_Rate', 'Foreign_Investment', 'Agricultural_Contribution',
            'Industrial_Contribution', 'Service_Sector_Contribution'
        ]
        
        # Generate realistic data for African countries
        data = {
            'GDP_per_capita': np.random.lognormal(6.5, 1.2, n_countries),
            'Life_Expectancy': np.random.normal(62, 8, n_countries),
            'Literacy_Rate': np.random.normal(65, 15, n_countries),
            'Urban_Population': np.random.normal(45, 20, n_countries),
            'Access_to_Electricity': np.random.normal(55, 25, n_countries),
            'Mobile_Subscriptions': np.random.normal(75, 20, n_countries),
            'Internet_Users': np.random.normal(35, 20, n_countries),
            'Health_Expenditure': np.random.normal(5.5, 2.5, n_countries),
            'Education_Expenditure': np.random.normal(4.0, 1.5, n_countries),
            'Unemployment_Rate': np.random.normal(12, 6, n_countries),
            'Inflation_Rate': np.random.normal(8, 5, n_countries),
            'Foreign_Investment': np.random.lognormal(1.5, 1.5, n_countries),
            'Agricultural_Contribution': np.random.normal(25, 10, n_countries),
            'Industrial_Contribution': np.random.normal(25, 8, n_countries),
            'Service_Sector_Contribution': np.random.normal(50, 12, n_countries)
        }
        
        # Ensure percentages don't exceed 100 and are positive
        for col in ['Literacy_Rate', 'Urban_Population', 'Access_to_Electricity', 
                   'Mobile_Subscriptions', 'Internet_Users', 'Agricultural_Contribution',
                   'Industrial_Contribution', 'Service_Sector_Contribution']:
            data[col] = np.clip(data[col], 0, 100)
            
        for col in ['Unemployment_Rate', 'Inflation_Rate']:
            data[col] = np.clip(data[col], 0, None)
            
        df = pd.DataFrame(data)
        
        # Add country names
        african_countries = [
            'Nigeria', 'Ethiopia', 'Egypt', 'DRC', 'Tanzania', 'South Africa', 'Kenya', 
            'Uganda', 'Algeria', 'Sudan', 'Morocco', 'Angola', 'Mozambique', 'Ghana',
            'Madagascar', 'Cameroon', "CÃ´te d'Ivoire", 'Niger', 'Burkina Faso', 'Mali',
            'Malawi', 'Zambia', 'Senegal', 'Chad', 'Somalia', 'Zimbabwe', 'Guinea',
            'Rwanda', 'Benin', 'Burundi', 'Tunisia', 'South Sudan', 'Togo', 'Sierra Leone',
            'Libya', 'Congo', 'Liberia', 'Central African Republic', 'Mauritania', 'Eritrea',
            'Namibia', 'Gambia', 'Botswana', 'Gabon', 'Lesotho', 'Guinea-Bissau',
            'Equatorial Guinea', 'Mauritius', 'Eswatini', 'Djibouti'
        ]
        
        df['Country'] = african_countries[:n_countries]
        df.set_index('Country', inplace=True)
        
        # Save for future use
        df.to_csv('data/african_development_indicators.csv')
    
    return df

# Load the data
df = load_african_data()
print("Dataset shape:", df.shape)
print("\nFirst 5 rows:")
df.head()

# Data Exploration and Preprocessing
print("Dataset Info:")
print(df.info())
print("\nMissing values:")
print(df.isnull().sum())
print("\nDescriptive Statistics:")
df.describe()

# Handle non-numeric data and missing values
# TO DO: Check for and handle any non-numeric data

# Check data types
print("Data types:")
print(df.dtypes)

# Check for missing values
print("\nMissing values per column:")
print(df.isnull().sum())

# Handle missing values by imputation with mean
df_clean = df.copy()
for column in df_clean.columns:
    if df_clean[column].isnull().sum() > 0:
        df_clean[column].fillna(df_clean[column].mean(), inplace=True)

print("\nAfter handling missing values:")
print(df_clean.isnull().sum().sum(), "missing values remaining")

# Standardize the data (important for PCA)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(df_clean)

print(f"Scaled data shape: {X_scaled.shape}")
print(f"Mean of scaled data: {np.mean(X_scaled, axis=0).round(2)}")
print(f"Std of scaled data: {np.std(X_scaled, axis=0).round(2)}")


